Analysis.txt
Homework 4
Joel Yuhas
3/18/18
------------------------------------------------------------------------------
TestList.c:
------------------------------------------------------------------------------
Created the makefile first so that I could compile everything as soon as I got
a draft working.

Made Make file, super easy. 


Have implemented everything but am getting a segmentation fault. The code is
trying to access something somewhere but I cant figure out what the issue is.
The error does not give a line number.

Have been backtracking and commenting out portions of the code, narrowing
things down. 

Found out that I shouldnt be trying to malloc the ElementStruct, but the 
LinkedListNodes instead. Working on it now.

Getting much much closer, can get the program to read in and create a list,
but having issues trying to access it and print it out.

Got it all working!!!!! its taken sooooo long but i finally got it. It was a 
combination of trying to access certian items in memeory when I shouldnt
have, using pointers when I didnt need to, and not copying the data
correctly. I even made a cool print mechanism that will print can check for
nulls and can keep printing. Right now its set to 6, but i could set it to
100 if I wanted to and it would work.

As of right now though, my code is INCREDIBLY inefficent. It does a Malloc
for every single node, which I imagine will take REALLY long compared to the
dynamic array. Im not sure if there is a better way to malloc it, Im pretty
sur there is, but the way I have now works so I wont break it.

------------------------------------------------------------------------------
TestSearch.C
------------------------------------------------------------------------------
Working on now. Started with a copy of TestList and will work backwards.
going to implement the SearchList now. Im going to have it simply go through
the whole list and see if it gets a match. Theres deffinitally better ways to
go about it, like with sorting and hash tables, but Ill use the simplest way
for now so I dont get ahead of myself.

Was having a VERY difficult time getting the pointer functions to work.
Figured it out though. Also found out that I didnt implement the remove front
and back functions from before, so I went back and did that

Finished it up, now going to work on the timing portions.

Have a number of warninigs to take care of.

Found out my search function wasnt doing what it was suppose to. It was an
issue with the pointers being called. Fixed them and also fixed the warnings
as well.

------------------------------------------------------------------------------
TestTime.c
------------------------------------------------------------------------------
Working on now. Started by copying Test_Search.c Implementd a search function
in the DynamicArrays.c file. Works almost identicall to the linked list
search excpet set for the DynamicArray data variables.

Have spent well over 9 hours on this assignment but things are turning out
well. Much high quality

Realized in class that I was not de-allocing the links that were being
removed. Will need to go in and fix that.

Got Both of the functions to search correctly. All that is left is to add the
timing macros!

Im setting up the macros now. Im unsure whether or not to run the search 1000
times and then test it. Ill set it up with 100 first and take it from there.


Had to implement the MACROS a bit differently than in Hw 2. Instead of running
the read timing macros 5 times, I opted to run them only once, but test the
whole program 5 times. This was beause the open is outside of an if statment
that contains all the searching procedures too, meaning that I cannot do a
loop of just the data input part.

Was able to easily isolate the searches though. 100 seemed to be a good size.
Ill increment int to 1000 and see if the results are different. Going to 
leave in all the other print statements and what not for consistency.

NOTE:
I had a print statement inside the search functions that printed out the value
of the variable that it matched with. This was to ensure that the program was
matching the desired variable/target correctly. Since the timing macros are
performing a 1000 time loop, I comented out the print. Redesigend it a bit.

Either way, there are still print statements in the search code if no matches
are found or if the array is null, but those will not be hit in this timing
test.

Going to have the test program run the test 5 times by default.

1000 took waaaayyyy too long. Kept at 100. incremented it to 200 to make sure
the relative time was about the same for each loop and it was so that means
that macros are most likely measureing the time fairly accuratly

The only thing is I still cannot figure out how to properly print the macros.
They always print at the top. The Data is still there but its just is formated
poorly.


------------------------------------------------------------------------------
DATA
------------------------------------------------------------------------------
The test measured:
	-Read Time
	-Linked List Search Time
	-Dynamic Array Search Time
	-Total Execution time

The searches were performed 200 times and the total program was ran 5 times.

The following is the aquaired data, where:
timerRead 	= Read time
timerSearchLL 	= Linked List Search time
timerSearchDA	= Dynamic Array Search time
timerMain	= Main Execution Time

Elapsed CPU time (timerRead) = 0.1 sec.
Elapsed CPU time (timerSearchLL) = 1.69 sec.
Elapsed CPU time (timerSearchLL, 200) = 8.450000e-03 sec.
Elapsed CPU time (timerSearchDA) = 1.3 sec.
Elapsed CPU time (timerSearchDA, 200) = 6.500000e-03 sec.
Elapsed CPU time (timerRead) = 0.14 sec.
Elapsed CPU time (timerSearchLL) = 1.64 sec.
Elapsed CPU time (timerSearchLL, 200) = 8.200000e-03 sec.
Elapsed CPU time (timerSearchDA) = 1.43 sec.
Elapsed CPU time (timerSearchDA, 200) = 7.150000e-03 sec.
Elapsed CPU time (timerRead) = 0.32 sec.
Elapsed CPU time (timerSearchLL) = 1.9 sec.
Elapsed CPU time (timerSearchLL, 200) = 9.500000e-03 sec.
Elapsed CPU time (timerSearchDA) = 1.38 sec.
Elapsed CPU time (timerSearchDA, 200) = 6.900000e-03 sec.
Elapsed CPU time (timerRead) = 0.33 sec.
Elapsed CPU time (timerSearchLL) = 1.85 sec.
Elapsed CPU time (timerSearchLL, 200) = 9.250000e-03 sec.
Elapsed CPU time (timerSearchDA) = 1.35 sec.
Elapsed CPU time (timerSearchDA, 200) = 6.750000e-03 sec.
Elapsed CPU time (timerRead) = 0.33 sec.
Elapsed CPU time (timerSearchLL) = 1.9 sec.
Elapsed CPU time (timerSearchLL, 200) = 9.500000e-03 sec.
Elapsed CPU time (timerSearchDA) = 1.39 sec.
Elapsed CPU time (timerSearchDA, 200) = 6.950000e-03 sec.
Elapsed CPU time (timerMain) = 17.14 sec.
Elapsed CPU time (timerMain, 5) = 3.428000e+00 sec.



NOTE:
Values in time.txt may differ if the test was re-ran since execution



------------------------------------------------------------------------------
Analysis of Data
------------------------------------------------------------------------------
Part of me wishes that I could of tested the read for the Linked List and
Dynamic Array independently, becasue im sure that the Dynamica Array would
of been significantly faster since the Linked List malloced every single time

However, in order to do this, two seperate programs would of needed to be
created or the data would have to be read twice in order to isolate the
linked list saving vs the dynamic array saving.


As the data shows, the Dynamic Array was consistently faster, by about 
1.3-03 seconds than the linked list. This is not that suprising considering
A large amount of data is being dealt with. The dynamicarray only needs to
traverse through an array while the linked list needs to keep calling
and loading pointers.


The read time was very inconsistent, ranging from 0.10 to 0.33 seconds.
However with reading in items, this is not all too suprising.

------------------------------------------------------------------------------
Now working on final touches. Not sure if mem wants all test or just one.
Im going to make it do all. It might take a long time

Tried running all 3 with valgrind but it took 15mins with no output. going to 
set up it up for TestList and Search since time is basically search with
extra macros.

Did it, ran in only 3 minutes.

Dealing with memory leak issues. Figured out a memory link where I was
alocating to a Elementptr and not freeing.

Figured out the memory leaks. Fixing them now

At first it was really bad. Half of my memory was being leaked. but now it
is MOSTLY fixed. There are still 520 bytes that I cant figure out where
they are running away from.

Gonna submit it. Have everything looking really good except for those 520
bytes.
------------------------------------------------------------------------------