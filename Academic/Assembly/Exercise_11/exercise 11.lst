


ARM Macro Assembler    Page 1 


    1 00000000         ;Exercise 06
    2 00000000         ;****************************************************************
    3 00000000         ;Exercies 5 which is usesd to demonstrate chrypotographic
    4 00000000         ;and decifering techniques
    5 00000000         ;Name:  Joel Yuhas
    6 00000000         ;Date:  3/10/2016
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  Lab section 2 2:00pm to 3:50pm
    9 00000000         ;---------------------------------------------------------------
   10 00000000         ;Keil Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;April 3, 2015
   13 00000000         ;****************************************************************
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;****************************************************************
   18 00000000         ;Include files
   19 00000000                 GET              MKL46Z4.s   ;Included by start.s
   21 00000000         ;****************************************************************
   22 00000000         ;EQUates
   23 00000000         
   24 00000000         ;---------------------------------------------------------------
   25 00000000         ;NVIC_ICER
   26 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
   27 00000000         ;             read:   0 = unmasked;   1 = masked
   28 00000000         ;             write:  0 = no effect;  1 = mask
   29 00000000         ;12:UART0 IRQ mask
   30 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   31 00000000         ;---------------------------------------------------------------
   32 00000000         ;NVIC_ICPR
   33 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
   34 00000000         ;             read:   0 = not pending;  1 = pending
   35 00000000         ;             write:  0 = no effect;
   36 00000000         ;                     1 = change status to not pending
   37 00000000         ;12:UART0 IRQ pending status
   38 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
   39 00000000         ;---------------------------------------------------------------
   40 00000000         ;NVIC_IPR0-NVIC_IPR7



ARM Macro Assembler    Page 2 


   41 00000000         ;2-bit priority:  00 = highest; 11 = lowest
   42 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   43 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   44 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PRI_POS)
   45 00000000         ;---------------------------------------------------------------
   46 00000000         ;NVIC_ISER
   47 00000000         ;31-00:SETENA=masks for HW IRQ sources;
   48 00000000         ;             read:   0 = masked;     1 = unmasked
   49 00000000         ;             write:  0 = no effect;  1 = unmask
   50 00000000         ;12:UART0 IRQ mask
   51 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   52 00000000         ;---------------------------------------------------------------
   53 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   54 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   55 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   56 00000000         ;---------------------------------------------------------------
   57 00000000         ;Port A
   59 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   61 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   62 00000000         ;---------------------------------------------------------------
   63 00000000         ;SIM_SCGC4
   64 00000000         ;1->10:UART0 clock gate control (enabled)
   65 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   66 00000000         ;---------------------------------------------------------------
   67 00000000         ;SIM_SCGC5
   68 00000000         ;1->09:Port A clock gate control (enabled)
   69 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
   70 00000000         ;---------------------------------------------------------------



ARM Macro Assembler    Page 3 


   71 00000000         ;SIM_SOPT2
   72 00000000         ;01=27-26:UART0SRC=UART0 clock source select
   73 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/2)
   74 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
   76 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
   78 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :OR: SIM_SOPT2_PLLFLLSEL_MASK)
   79 00000000         ;---------------------------------------------------------------
   80 00000000         ;SIM_SOPT5
   81 00000000         ; 0->   16:UART0 open drain enable (disabled)
   82 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
   83 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
   87 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:                                  SIM_SOPT
5_UART0RXSRC_MASK :OR:                                  SIM_SOPT5_UART0TXSRC_MASK)
   88 00000000         ;---------------------------------------------------------------
   89 00000000         ;UART0_BDH
   90 00000000         ;    0->  7:LIN break detect IE (disabled)
   91 00000000         ;    0->  6:RxD input active edge IE (disabled)
   92 00000000         ;    0->  5:Stop bit number select (1)
   93 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
   94 00000000         ;UART0CLK is MCGPLLCLK/2
   95 00000000         ;MCGPLLCLK is 96 MHz
   96 00000000         ;MCGPLLCLK/2 is 48 MHz
   97 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
   98 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
   99 00000000         ;---------------------------------------------------------------
  100 00000000         ;UART0_BDL
  101 00000000         ;26->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  102 00000000         ;UART0CLK is MCGPLLCLK/2
  103 00000000         ;MCGPLLCLK is 96 MHz
  104 00000000         ;MCGPLLCLK/2 is 48 MHz
  105 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  106 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38



ARM Macro Assembler    Page 4 


  107 00000000         ;---------------------------------------------------------------
  108 00000000         ;UART0_C1
  109 00000000         ;0-->7:LOOPS=loops select (normal)
  110 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  111 00000000         ;0-->5:RSRC=receiver source select (internal--no effect LOOPS=0)
  112 00000000         ;0-->4:M=9- or 8-bit mode select 
  113 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  114 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  115 00000000         ;0-->2:IDLE=idle line type select (idle begins after start bit)
  116 00000000         ;0-->1:PE=parity enable (disabled)
  117 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  118 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  119 00000000         ;---------------------------------------------------------------
  120 00000000         ;UART0_C2
  121 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  122 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  123 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  124 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  125 00000000         ;1-->3:TE=transmitter enable (enabled)
  126 00000000         ;1-->2:RE=receiver enable (enabled)
  127 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  128 00000000         ;0-->0:SBK=send break (disabled, normal)
  129 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2_RE_MASK)
  130 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C2_T_R)
  131 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C2_T_RI)
  132 00000000         ;---------------------------------------------------------------
  133 00000000         ;UART0_C3
  134 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  135 00000000         ;           10th data bit for transmitter (not used M10=0)
  136 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  137 00000000         ;           10th data bit for receiver (not used M10=0)
  138 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  139 00000000         ;            (no effect LOOPS=0)
  140 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)



ARM Macro Assembler    Page 5 


  141 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  142 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  143 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  144 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  145 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  146 00000000         ;---------------------------------------------------------------
  147 00000000         ;UART0_C4
  148 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled)
  149 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled)
  150 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  151 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  152 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  153 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  154 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  155 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  156 00000000         ;---------------------------------------------------------------
  157 00000000         ;UART0_C5
  158 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  159 00000000         ;  0-->  6:Reserved; read-only; always 0
  160 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  161 00000000         ;000-->4-2:Reserved; read-only; always 0
  162 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only)
  163 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
  164 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  165 00000000         ;---------------------------------------------------------------
  166 00000000         ;UART0_S1
  167 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
  168 00000000         ;0-->6:TC=transmission complete flag; read-only
  169 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  170 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  171 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear)
  172 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  173 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  174 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)



ARM Macro Assembler    Page 6 


  175 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              0x1F
  176 00000000         ;---------------------------------------------------------------
  177 00000000         ;UART0_S2
  178 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  179 00000000         ;             write 1 to clear
  180 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear)
  181 00000000         ;              write 1 to clear
  182 00000000         ;0-->5:(reserved); read-only; always 0
  183 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  184 00000000         ;0-->3:RWUID=receive wake-up idle detect
  185 00000000         ;0-->2:BRK13=break character generation length (10)
  186 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  187 00000000         ;0-->0:RAF=receiver active flag; read-only
  188 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              0xC0
  189 00000000         ;---------------------------------------------------------------
  190 00000000         
  191 00000000 0000000D 
                       CR      EQU              0x0D
  192 00000000 0000000A 
                       LF      EQU              0x0A
  193 00000000 0000004F 
                       MAX_STRING
                               EQU              79
  194 00000000         
  195 00000000 00000000 
                       IN_PTR  EQU              0
  196 00000000 00000004 
                       OUT_PTR EQU              4
  197 00000000 00000008 
                       BUF_STRT
                               EQU              8
  198 00000000 0000000C 
                       BUF_PAST
                               EQU              12
  199 00000000 00000010 
                       BUF_SIZE
                               EQU              16
  200 00000000 00000011 



ARM Macro Assembler    Page 7 


                       NUM_ENQD
                               EQU              17
  201 00000000         
  202 00000000         
  203 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4
  204 00000000 00000050 
                       TRxQ_BUF_SZ
                               EQU              80
  205 00000000 00000012 
                       Q_REC_SZ
                               EQU              18
  206 00000000         
  207 00000000         
  208 00000000         ;EXPORT  __Vectors
  209 00000000         ;EXPORT  __Vectors_End
  210 00000000         ;EXPORT  __Vectors_Size
  211 00000000         ;IMPORT  __initial_sp
  212 00000000         
  213 00000000         
  214 00000000         ;****************************************************************
  215 00000000         ;Program
  216 00000000         ;Linker requires Reset_Handler
  217 00000000                 AREA             MyCode,CODE,READONLY
  218 00000000                 ENTRY
  219 00000000                 EXPORT           PutNumHex
  220 00000000                 EXPORT           AddIntMultiU
  221 00000000                 EXPORT           GetStringSB
  222 00000000                 EXPORT           PutStringSB
  223 00000000                 EXPORT           Init_UART0_IRQ
  224 00000000         
  225 00000000                 IMPORT           Startup
  226 00000000         
  227 00000000         ;Reset_Handler
  228 00000000         main
  229 00000000         ;---------------------------------------------------------------
  230 00000000         ;Mask interrupts
  231 00000000 B672            CPSID            I
  232 00000002         ;KL46 system startup with 48-MHz system clock
  233 00000002 F7FF FFFE       BL               Startup
  234 00000006         ;---------------------------------------------------------------



ARM Macro Assembler    Page 8 


  235 00000006         ;---------------------- HEADER -------------------------
  236 00000006         ;Program creates a Queue and has EnQueue and Dequeue functonality
  237 00000006         ;as well as being able to display help and status tables
  238 00000006         ;
  239 00000006         ;these subroutines include but are not limited to
  240 00000006         ;----------InitQueue
  241 00000006         ;----------Enqueue
  242 00000006         ;----------Dequeue
  243 00000006         ;----------PutNumHex
  244 00000006         ;----------GetStringSB
  245 00000006         ;----------PutStringSB
  246 00000006         ;----------PutNumU
  247 00000006         ;----------PutChar
  248 00000006         ;----------GetChar
  249 00000006         ;----------UART0_ISR
  250 00000006         ;----------Init_UART_IRQ
  251 00000006         ;----------PutNumSB
  252 00000006         
  253 00000006         ;-----**NEW**----
  254 00000006         ;----------AddIntMultiU
  255 00000006         
  256 00000006         ;
  257 00000006         ;the program also used a number of other subroutines that allowed it
  258 00000006         ;to read in the input of the useer
  259 00000006         ;
  260 00000006         
  261 00000006         
  262 00000006         
  263 00000006         ;>>>>> begin main program code <<<<< 
  264 00000006         ;>>>>> end main program code <<<<< 
  265 00000006         
  266 00000006         ;>>>>> begin subroutine code <<<<<
  267 00000006         AddIntMultiU
  268 00000006         
  269 00000006 B5F8            PUSH             {R3-R7,LR}
  270 00000008 2600            MOVS             R6,#0       ;counter
  271 0000000A 2700            MOVS             R7,#0       ;initialize carry
  272 0000000C 1E5B            SUBS             R3,R3,#1
  273 0000000E 009B            LSLS             R3,#2       ;incrmennts counter
  274 00000010         
  275 00000010         Loop_AIMU
  276 00000010 58D4            LDR              R4,[R2,R3]



ARM Macro Assembler    Page 9 


  277 00000012 58CD            LDR              R5,[R1,R3]
  278 00000014         
  279 00000014 F387 8800       MSR              APSR,R7     ;putting the carry back
  280 00000018         
  281 00000018 4165            ADCS             R5,R5,R4
  282 0000001A         
  283 0000001A F3EF 8700       MRS              R7,APSR     ;perserving the carry
  284 0000001E         
  285 0000001E 50C5            STR              R5,[R0,R3]
  286 00000020         
  287 00000020         
  288 00000020 429E            CMP              R6,R3       ;checks to see if the size is the same
  289 00000022 D003            BEQ              DONE
  290 00000024         
  291 00000024 1F1B            SUBS             R3,R3,#4
  292 00000026         
  293 00000026 E7F3            B                Loop_AIMU
  294 00000028         
  295 00000028         INVALID
  296 00000028 2001            MOVS             R0,#1
  297 0000002A E003            B                Super_Done
  298 0000002C         
  299 0000002C         DONE
  300 0000002C F387 8800       MSR              APSR,R7     ;putting the carry back
  301 00000030 D2FA            BCS              INVALID
  302 00000032 2000            MOVS             R0,#0
  303 00000034         
  304 00000034         Super_Done
  305 00000034         
  306 00000034 BDF8            POP              {R3-R7,PC}
  307 00000036         
  308 00000036         
  309 00000036         
  310 00000036         
  311 00000036         
  312 00000036         
  313 00000036         ;-------------------------------- InitQueue ------------------------------
  314 00000036         ;initilizes the queue, R1 must be queue record, can be used for multiple
  315 00000036         ;queues
  316 00000036         InitQueue
  317 00000036         
  318 00000036 B501            PUSH             {R0,LR}



ARM Macro Assembler    Page 10 


  319 00000038         
  320 00000038 6008            STR              R0,[R1,#IN_PTR]
  321 0000003A 6048            STR              R0,[R1,#OUT_PTR]
  322 0000003C 6088            STR              R0,[R1,#BUF_STRT]
  323 0000003E 1880            ADDS             R0,R0,R2
  324 00000040 60C8            STR              R0,[R1,#BUF_PAST]
  325 00000042 740A            STRB             R2,[R1,#BUF_SIZE]
  326 00000044 2000            MOVS             R0,#0
  327 00000046 7448            STRB             R0,[R1,#NUM_ENQD]
  328 00000048         
  329 00000048 BD01            POP              {R0,PC}
  330 0000004A         
  331 0000004A         
  332 0000004A         ;-------------------------------- DeQueue --------------------------------
  333 0000004A         ;R1 Address of Queue record structure
  334 0000004A         ;C flag succes(0)
  335 0000004A         ;the deuque subrotine, dequeus and advances the pointer
  336 0000004A         DeQueue
  337 0000004A         
  338 0000004A B5FE            PUSH             {R1-R7,LR}
  339 0000004C         
  340 0000004C 7C4C            LDRB             R4,[R1,#NUM_ENQD] ;loading values
  341 0000004E 680D            LDR              R5,[R1,#IN_PTR]
  342 00000050 688E            LDR              R6,[R1,#BUF_STRT]
  343 00000052 684F            LDR              R7,[R1,#OUT_PTR]
  344 00000054 68CB            LDR              R3,[R1,#BUF_PAST]
  345 00000056         
  346 00000056         
  347 00000056 2C00            CMP              R4,#0       ;checks if size is zero
  348 00000058 D00F            BEQ              Failed_Dequeue
  349 0000005A 783A            LDRB             R2,[R7,#0]
  350 0000005C         
  351 0000005C 1C7F            ADDS             R7,R7,#1
  352 0000005E 1E64            SUBS             R4,R4,#1
  353 00000060         
  354 00000060         
  355 00000060 744C            STRB             R4,[R1,#NUM_ENQD] ;storing back into loacation
  356 00000062 604F            STR              R7,[R1,#OUT_PTR]
  357 00000064         
  358 00000064 429F            CMP              R7,R3
  359 00000066 D010            BEQ              InPointer_Bigger2 ;if pointer procgressing past buffer limit,
  360 00000068         ;then advacne back



ARM Macro Assembler    Page 11 


  361 00000068         Done_Success
  362 00000068 F3EF 8000       MRS              R0,APSR     ; sets C flag to clear
  363 0000006C 2020            MOVS             R0,#0x20
  364 0000006E 0609            LSLS             R1,R1,#24
  365 00000070 4388            BICS             R0,R0,R1
  366 00000072 F380 8800       MSR              APSR,R0
  367 00000076 0010            MOVS             R0,R2
  368 00000078         
  369 00000078         DoneD1
  370 00000078 BDFE            POP              {R1-R7,PC}
  371 0000007A         
  372 0000007A         Failed_Dequeue
  373 0000007A         ;Unsuccesfull
  374 0000007A F3EF 8000       MRS              R0,APSR     ;manually sets C flag to set
  375 0000007E 2120            MOVS             R1,#0x20
  376 00000080 0609            LSLS             R1,R1,#24
  377 00000082 4308            ORRS             R0,R0,R1
  378 00000084 F380 8800       MSR              APSR,R0
  379 00000088 E7F6            B                DoneD1
  380 0000008A         
  381 0000008A         InPointer_Bigger2
  382 0000008A 0037            MOVS             R7,R6       ;manually moving the pointer back to start
  383 0000008C 604F            STR              R7,[R1,#OUT_PTR]
  384 0000008E E7EB            B                Done_Success
  385 00000090         
  386 00000090         
  387 00000090         ;--------------------------------- EnQueue ------------------------------------
  388 00000090         ;R0 Character to enqueue
  389 00000090         ;R1 Address of Queue record structure
  390 00000090         ;C flag succes(0)
  391 00000090         ;Enqueues the recived value and advances
  392 00000090         Enqueue
  393 00000090         
  394 00000090 B57F            PUSH             {R0-R6,LR}
  395 00000092         
  396 00000092 7C0B            LDRB             R3,[R1,#BUF_SIZE] ;initializing the queue structure
  397 00000094 7C4C            LDRB             R4,[R1,#NUM_ENQD]
  398 00000096 680D            LDR              R5,[R1,#IN_PTR]
  399 00000098 688E            LDR              R6,[R1,#BUF_STRT]
  400 0000009A 68CF            LDR              R7,[R1,#BUF_PAST]
  401 0000009C         
  402 0000009C         



ARM Macro Assembler    Page 12 


  403 0000009C 429C            CMP              R4,R3
  404 0000009E D012            BEQ              Failed_Enqueue ;fails if the queue is full
  405 000000A0 7028            STRB             R0,[R5,#0]  ;stores value
  406 000000A2 1C6D            ADDS             R5,R5,#1    ;advances counters
  407 000000A4 1C64            ADDS             R4,R4,#1
  408 000000A6         
  409 000000A6 600D            STR              R5,[R1,#IN_PTR] ;stores back
  410 000000A8 744C            STRB             R4,[R1,#NUM_ENQD]
  411 000000AA         
  412 000000AA 42BD            CMP              R5,R7
  413 000000AC D008            BEQ              InPointer_Bigger1 ;if inpointer reaches end of the queue, go back
  414 000000AE         
  415 000000AE         Done
  416 000000AE F3EF 8000       MRS              R0,APSR     ; sets C flag to clear
  417 000000B2 2020            MOVS             R0,#0x20
  418 000000B4 0609            LSLS             R1,R1,#24
  419 000000B6 4388            BICS             R0,R0,R1
  420 000000B8 F380 8800       MSR              APSR,R0
  421 000000BC 2000            MOVS             R0,#0
  422 000000BE         
  423 000000BE         
  424 000000BE BD7F            POP              {R0-R6,PC}
  425 000000C0         
  426 000000C0         InPointer_Bigger1                    ;if the inpointer is bigger, manually set it back
  427 000000C0 0035            MOVS             R5,R6
  428 000000C2 600D            STR              R5,[R1,#IN_PTR]
  429 000000C4 E7F3            B                Done
  430 000000C6         
  431 000000C6         Failed_Enqueue
  432 000000C6 F3EF 8000       MRS              R0,APSR     ; manually sets C flag to set
  433 000000CA 2120            MOVS             R1,#0x20
  434 000000CC 0609            LSLS             R1,R1,#24
  435 000000CE 4308            ORRS             R0,R0,R1
  436 000000D0 F380 8800       MSR              APSR,R0
  437 000000D4 BD7F            POP              {R0-R6,PC}
  438 000000D6         
  439 000000D6         
  440 000000D6         
  441 000000D6         ;---------------------------- PutNumHex----------------------
  442 000000D6         ;takes in value at R0
  443 000000D6         ;doesnt output any values
  444 000000D6         ;converts address into hex value, prints to terminal



ARM Macro Assembler    Page 13 


  445 000000D6         PutNumHex
  446 000000D6 B53F            PUSH             {R0-R5,LR}
  447 000000D8         
  448 000000D8 221C            MOVS             R2,#28      ;defining constants that will need to be added
  449 000000DA 230F            MOVS             R3,#0x0000000F
  450 000000DC 0004            MOVS             R4,R0
  451 000000DE 2508            MOVS             R5,#8
  452 000000E0         
  453 000000E0         Loop_PNH
  454 000000E0         
  455 000000E0 40D0            LSRS             R0,R0,R2    ;shifiting by how much we need
  456 000000E2 4018            ANDS             R0,R3
  457 000000E4 2809            CMP              R0,#9
  458 000000E6 D908            BLS              Number_PNH  ;checks if number
  459 000000E8 3037            ADDS             R0,R0,#55   ;if not assume its letter
  460 000000EA F000 F8E6       BL               PutChar
  461 000000EE 0020            MOVS             R0,R4
  462 000000F0         
  463 000000F0 1F12            SUBS             R2,R2,#4    ;incrementing 
  464 000000F2 1E6D            SUBS             R5,R5,#1
  465 000000F4 2D00            CMP              R5,#0
  466 000000F6 D009            BEQ              Done_PNH
  467 000000F8 E7F2            B                Loop_PNH
  468 000000FA         
  469 000000FA         
  470 000000FA         
  471 000000FA         Number_PNH
  472 000000FA 3030            ADDS             R0,R0,#0x00000030 ;speical case for number 
  473 000000FC F000 F8DD       BL               PutChar
  474 00000100 0020            MOVS             R0,R4
  475 00000102         
  476 00000102 1F12            SUBS             R2,R2,#4
  477 00000104 1E6D            SUBS             R5,R5,#1
  478 00000106 2D00            CMP              R5,#0
  479 00000108 D000            BEQ              Done_PNH
  480 0000010A E7E9            B                Loop_PNH
  481 0000010C         
  482 0000010C         Done_PNH
  483 0000010C BD3F            POP              {R0-R5,PC}
  484 0000010E         
  485 0000010E         
  486 0000010E         ;---------------------------------PUTNUMSB----------------------------



ARM Macro Assembler    Page 14 


  487 0000010E         ;takes value from R0
  488 0000010E         ;doesnt output any values except for PSVR
  489 0000010E         ;prints to the terminal the least significant bit
  490 0000010E         PutNumSB
  491 0000010E B503            PUSH             {R0-R1,LR}
  492 00000110 210F            MOVS             R1,#0x0000000F
  493 00000112 4008            ANDS             R0,R1
  494 00000114 F000 F82A       BL               PutNumU
  495 00000118 F000 F8CF       BL               PutChar
  496 0000011C BD03            POP              {R0-R1,PC}
  497 0000011E         
  498 0000011E         ;------------------------------- GETSTRINGSB -------------------------- 
  499 0000011E         ;Recieves in R0,
  500 0000011E         ;Outputs string to R0
  501 0000011E         ;takes a string that is typed in and then puts into R0
  502 0000011E         GetStringSB
  503 0000011E B51F            PUSH             { R0 - R4, LR }
  504 00000120 2300            MOVS             R3,#0       ;initializing counter
  505 00000122 0004            MOVS             R4,R0       ;storing adress
  506 00000124 1E49            SUBS             R1,R1,#1    ;subtracting buffer capacity
  507 00000126         
  508 00000126         Loop1A                               ;super loop
  509 00000126 F000 F8D3       BL               GetChar     ;checking if input is "enter"
  510 0000012A 280D            CMP              R0, #CR
  511 0000012C D00B            BEQ              Enter       ;branching if it is
  512 0000012E         
  513 0000012E         
  514 0000012E 4299            CMP              R1,R3       ;checking if index = buffer cpacity
  515 00000130 D004            BEQ              Skip        ;if it is, skip
  516 00000132 54E0            STRB             R0,[R4,R3]  ;otherwise store in adress with value (R0) at address (R4) o
                                                            ffset of increment (R3)
  517 00000134 1C5B            ADDS             R3,R3,#1    ;incrementing counter
  518 00000136         
  519 00000136         
  520 00000136 F000 F8C0       BL               PutChar     ;printing it
  521 0000013A E7F4            B                Loop1A      ;looping almost forever
  522 0000013C         
  523 0000013C         Skip
  524 0000013C F000 F8C8       BL               GetChar     ;triggered if buffercapacity over limit and ignores everythi
                                                            ng until enter is hit
  525 00000140 280D            CMP              R0, #CR
  526 00000142 D000            BEQ              Enter



ARM Macro Assembler    Page 15 


  527 00000144 E7FA            B                Skip
  528 00000146         Enter                                ;if enter was hit
  529 00000146 2000            MOVS             R0,#0       ;storing '0' at end
  530 00000148 54E0            STRB             R0,[R4,R3]
  531 0000014A 200D            MOVS             R0,#CR      ;printing new line
  532 0000014C F000 F8B5       BL               PutChar
  533 00000150 200A            MOVS             R0,#LF
  534 00000152 F000 F8B2       BL               PutChar
  535 00000156 BD1F            POP              { R0 - R4, PC }
  536 00000158         
  537 00000158         
  538 00000158         ;------------------------------ LENGTHSTRINGSB -------------------------  
  539 00000158         LengthStringSB
  540 00000158 B50A            PUSH             { R1, R3, LR }
  541 0000015A         
  542 0000015A 2200            MOVS             R2,#0       ;initializing counter
  543 0000015C         
  544 0000015C         Loop2
  545 0000015C 5C83            LDRB             R3,[R0,R2]  ;loading value in string
  546 0000015E 2B00            CMP              R3,#0       ;checking if '0', if it is, run away
  547 00000160 D003            BEQ              Ende
  548 00000162 428A            CMP              R2, R1      ;checking if counter = buffercapacity, if it does, run away
  549 00000164 D001            BEQ              Ende
  550 00000166 1C52            ADDS             R2,R2, #1
  551 00000168         
  552 00000168 E7F8            B                Loop2       ;looping almost forver
  553 0000016A         Ende
  554 0000016A         
  555 0000016A BD0A            POP              { R1, R3, PC }
  556 0000016C         
  557 0000016C         
  558 0000016C         ;---------------------------------- PUTNUMU ------------------------------
  559 0000016C         ;prints the number in decimal form in R0
  560 0000016C         ;does not output any registers
  561 0000016C         PutNumU
  562 0000016C B507            PUSH             { R0 - R2, LR }
  563 0000016E 2200            MOVS             R2,#0       ;initializng counter
  564 00000170         Loop3
  565 00000170 0001            MOVS             R1, R0      ;setting up for DIVU (R1 divedend, R0 divider)
  566 00000172 200A            MOVS             R0, #10
  567 00000174 F000 F81B       BL               DIVU        ;calling DIVU
  568 00000178 B402            PUSH             {R1}        ;storing in stack because it gets values in revers order



ARM Macro Assembler    Page 16 


  569 0000017A 1C52            ADDS             R2,R2,#1
  570 0000017C 2800            CMP              R0, #0      ;checking done
  571 0000017E D000            BEQ              Out         ;if it is, end
  572 00000180 E7F6            B                Loop3
  573 00000182         
  574 00000182         Out
  575 00000182 BC01            POP              {R0}        ;finishing up
  576 00000184 1E52            SUBS             R2,R2,#1
  577 00000186 3030            ADDS             R0,R0,#'0'
  578 00000188 F000 F897       BL               PutChar
  579 0000018C 2A00            CMP              R2,#0
  580 0000018E D000            BEQ              Done4
  581 00000190 E7F7            B                Out
  582 00000192         
  583 00000192         Done4
  584 00000192 BD07            POP              { R0 - R2, PC }
  585 00000194         
  586 00000194         
  587 00000194         ;--------------------------------- PUTSTRINGSB -----------------------------
  588 00000194         ;prints the string stored in R0 to terminal
  589 00000194         ;does not output any registers
  590 00000194         PutStringSB
  591 00000194 B50F            PUSH             { R0, R1, R2, R3, LR }
  592 00000196         
  593 00000196 2300            MOVS             R3,#0       ;counter
  594 00000198 0002            MOVS             R2,R0       ;R2 gets adress
  595 0000019A         
  596 0000019A         Loop4
  597 0000019A 428B            CMP              R3,R1       ;compares counter with MAX SIZE
  598 0000019C D006            BEQ              Ende2
  599 0000019E         
  600 0000019E 5CD0            LDRB             R0,[R2,R3]  ;loads value at R2 offset R3 into R0
  601 000001A0 2800            CMP              R0,#0       ;checks if null terminator
  602 000001A2 D003            BEQ              Ende2
  603 000001A4         
  604 000001A4 F000 F889       BL               PutChar     ;prints
  605 000001A8 1C5B            ADDS             R3,R3, #1   ;adds to counter
  606 000001AA         
  607 000001AA E7F6            B                Loop4
  608 000001AC         Ende2
  609 000001AC         
  610 000001AC BD0F            POP              { R0, R1, R2, R3, PC }



ARM Macro Assembler    Page 17 


  611 000001AE         
  612 000001AE         
  613 000001AE         ;------------------------------------- DIVU --------------------------------
  614 000001AE         ;takes in Diveded (R1) and Divisor (R0)
  615 000001AE         ;returns the dividen amount
  616 000001AE         DIVU
  617 000001AE         
  618 000001AE B404            PUSH             {R2}        ;Pushing R2 to save
  619 000001B0 2200            MOVS             R2,#0
  620 000001B2 2800            CMP              R0,#0       ;checks if Divide by zero
  621 000001B4 D009            BEQ              DIV_BY_ZERO
  622 000001B6         
  623 000001B6         
  624 000001B6         
  625 000001B6 2900            CMP              R1,#0       ;checks if Dividend is zero
  626 000001B8 D00F            BEQ              EndIFF
  627 000001BA         
  628 000001BA 4281    While   CMP              R1,R0       ;the main loop where Dividen is conitunually subtracted
  629 000001BC D302            BLO              Endwhile    ;by the Divider until Dividen is either 0 or less than
  630 000001BE         ;the Divider... R2 is used as the quotient
  631 000001BE 1A09            SUBS             R1,R1,R0
  632 000001C0 1C52            ADDS             R2,R2,#1
  633 000001C2         
  634 000001C2 E7FA            B                While
  635 000001C4         Endwhile
  636 000001C4 0010            MOVS             R0,R2
  637 000001C6         
  638 000001C6         
  639 000001C6 BC04    DIVU_DONE
                               POP              {R2}        ;DIVU_DONE used when needed to return out of DIVU subroutine
                                                            
  640 000001C8         
  641 000001C8 4770            BX               LR
  642 000001CA         
  643 000001CA         
  644 000001CA F3EF 8000 
                       DIV_BY_ZERO
                               MRS              R0,APSR     ;Divide by zeros manually sets C flag to set
  645 000001CE 2120            MOVS             R1,#0x20
  646 000001D0 0609            LSLS             R1,R1,#24
  647 000001D2 4308            ORRS             R0,R0,R1
  648 000001D4 F380 8800       MSR              APSR,R0



ARM Macro Assembler    Page 18 


  649 000001D8 E7F5            B                DIVU_DONE
  650 000001DA         
  651 000001DA         
  652 000001DA F3EF 8000 
                       EndIFF  MRS              R0,APSR     ;EndIFF manually sets C flag to clear if dividend is 0
  653 000001DE 2020            MOVS             R0,#0x20
  654 000001E0 0609            LSLS             R1,R1,#24
  655 000001E2 4388            BICS             R0,R0,R1
  656 000001E4 F380 8800       MSR              APSR,R0
  657 000001E8 2000            MOVS             R0,#0
  658 000001EA         
  659 000001EA E7EC            B                DIVU_DONE
  660 000001EC         
  661 000001EC         
  662 000001EC         ;------------------------------------- INIT --------------------------------
  663 000001EC         ;initializes the UART_IRQ
  664 000001EC         ;code taken from lecture
  665 000001EC         ;shown in chunks
  666 000001EC         Init_UART0_IRQ
  667 000001EC B50E            PUSH             { R1, R2, R3, LR}
  668 000001EE         ;Select MCGPLLCLK / 2 as UART0 clock source
  669 000001EE 483C            LDR              R0,=SIM_SOPT2
  670 000001F0 493C            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  671 000001F2 6802            LDR              R2,[R0,#0]
  672 000001F4 438A            BICS             R2,R2,R1
  673 000001F6 493C            LDR              R1,=SIM_SOPT2_UART0_MCGPLLCLK_DIV2
  674 000001F8 430A            ORRS             R2,R2,R1
  675 000001FA 6002            STR              R2,[R0,#0]
  676 000001FC         ;Enable external connection for UART0
  677 000001FC 483B            LDR              R0,=SIM_SOPT5
  678 000001FE 493C            LDR              R1,= SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
  679 00000200 6802            LDR              R2,[R0,#0]
  680 00000202 438A            BICS             R2,R2,R1
  681 00000204 6002            STR              R2,[R0,#0]
  682 00000206         ;Enable clock for UART0 module
  683 00000206 483B            LDR              R0,=SIM_SCGC4
  684 00000208 493B            LDR              R1,= SIM_SCGC4_UART0_MASK
  685 0000020A 6802            LDR              R2,[R0,#0]
  686 0000020C 430A            ORRS             R2,R2,R1
  687 0000020E 6002            STR              R2,[R0,#0]
  688 00000210         ;Enable clock for Port A module
  689 00000210 483A            LDR              R0,=SIM_SCGC5



ARM Macro Assembler    Page 19 


  690 00000212 493B            LDR              R1,= SIM_SCGC5_PORTA_MASK
  691 00000214 6802            LDR              R2,[R0,#0]
  692 00000216 430A            ORRS             R2,R2,R1
  693 00000218 6002            STR              R2,[R0,#0]
  694 0000021A         ;Connect PORT A Pin 1 (PTA1) to UART0 Rx (J1 Pin 02)
  695 0000021A 483A            LDR              R0,=PORTA_PCR1
  696 0000021C 493A            LDR              R1,=PORT_PCR_SET_PTA1_UART0_RX
  697 0000021E 6001            STR              R1,[R0,#0]
  698 00000220         ;Connect PORT A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)
  699 00000220 483A            LDR              R0,=PORTA_PCR2
  700 00000222 4939            LDR              R1,=PORT_PCR_SET_PTA2_UART0_TX
  701 00000224 6001            STR              R1,[R0,#0]
  702 00000226         
  703 00000226         
  704 00000226         ;Disable UART0 receiver and transmitter
  705 00000226 483A            LDR              R0,=UART0_BASE
  706 00000228 210C            MOVS             R1,#UART0_C2_T_R
  707 0000022A 78C2            LDRB             R2,[R0,#UART0_C2_OFFSET]
  708 0000022C 438A            BICS             R2,R2,R1
  709 0000022E 70C2            STRB             R2,[R0,#UART0_C2_OFFSET]
  710 00000230         ;Set UART0 for 9600 baud, 8N1 protocol
  711 00000230 2101            MOVS             R1,#UART0_BDH_9600
  712 00000232 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  713 00000234 2138            MOVS             R1,#UART0_BDL_9600
  714 00000236 7041            STRB             R1,[R0,#UART0_BDL_OFFSET] ;Somethign on here
  715 00000238 2100            MOVS             R1,#UART0_C1_8N1
  716 0000023A 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  717 0000023C 2100            MOVS             R1,#UART0_C3_NO_TXINV
  718 0000023E 7181            STRB             R1,[R0,#UART0_C3_OFFSET]
  719 00000240 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  720 00000242 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  721 00000244 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  722 00000246 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  723 00000248 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  724 0000024A 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  726 0000024C 21C0            MOVS             R1,    #UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
  727 0000024E 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  728 00000250         ;Enable UART0 receiver and transmitter
  729 00000250 212C            MOVS             R1,#UART0_C2_T_RI
  730 00000252 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  731 00000254         
  732 00000254 482F            LDR              R0,=RxQBuffer



ARM Macro Assembler    Page 20 


  733 00000256 4930            LDR              R1,=RxQRecord
  734 00000258 2250            MOVS             R2,#TRxQ_BUF_SZ
  735 0000025A F7FF FEEC       BL               InitQueue
  736 0000025E         
  737 0000025E 482F            LDR              R0,=TxQBuffer
  738 00000260 492F            LDR              R1,=TxQRecord
  739 00000262 2250            MOVS             R2,#TRxQ_BUF_SZ
  740 00000264 F7FF FEE7       BL               InitQueue
  741 00000268         
  742 00000268         ;added for prelab 9
  743 00000268         ;Set UART IRQ Priority
  744 00000268 482E            LDR              R0,=UART0_IPR
  745 0000026A 4A2F            LDR              R2,=NVIC_IPR_UART0_PRI_3
  746 0000026C 6803            LDR              R3,[R0,#0]
  747 0000026E 4313            ORRS             R3,R3,R2
  748 00000270 6003            STR              R3,[R0,#0]
  749 00000272         
  750 00000272         ;clearing pending uart0Interrupts
  751 00000272 482E            LDR              R0,=NVIC_ICPR
  752 00000274 492E            LDR              R1,=NVIC_ICPR_UART0_MASK
  753 00000276 6001            STR              R1,[R0,#0]
  754 00000278         
  755 00000278         ;unmaks UART0 interrupts
  756 00000278 482E            LDR              R0,=NVIC_ISER
  757 0000027A 492D            LDR              R1,=NVIC_ISER_UART0_MASK
  758 0000027C 6001            STR              R1,[R0,#0]
  759 0000027E         
  760 0000027E         
  761 0000027E BD0E            POP              { R1, R2, R3, PC}
  762 00000280         
  763 00000280         ;-----------------------------------UART0-ISR---------------------------------
  764 00000280         ;the interrupt handler that is called by the vector table
  765 00000280         UART0_ISR
  766 00000280 B672            CPSID            I
  767 00000282 B5E0            PUSH             {R5-R7, LR}
  768 00000284         
  769 00000284 4A22            LDR              R2,=UART0_BASE ;recives the base
  770 00000286 78D1            LDRB             R1,[R2,#UART0_C2_OFFSET]
  771 00000288 2080            MOVS             R0,#UART0_C2_TIE_MASK ;masking
  772 0000028A         
  773 0000028A 4208            TST              R0,R1       ;testing the value in the offset verses the 
  774 0000028C         ;tie mask



ARM Macro Assembler    Page 21 


  775 0000028C D00B            BEQ              RxInterrupt ;if they equal, then its confimed a Rx interrupt and brankes
                                                            
  776 0000028E 7911            LDRB             R1,[R2,#UART0_S1_OFFSET]
  777 00000290 2080            MOVS             R0,#UART0_S1_TDRE_MASK ;TDRE mask
  778 00000292         
  779 00000292 4208            TST              R0,R1       ;checks again
  780 00000294         
  781 00000294 D007            BEQ              RxInterrupt ;if they equal, then its confimed a Rx interrupt and brankes
                                                            
  782 00000296         
  783 00000296 4922            LDR              R1,=TxQRecord ;if code has lasted this far, then TxQRecord is loaded
  784 00000298         
  785 00000298 F7FF FED7       BL               DeQueue     ;dequeues
  786 0000029C         
  787 0000029C D201            BCS              Else_01     ;if it fails, initiate else
  788 0000029E         
  789 0000029E 71D0            STRB             R0,[R2,#UART0_D_OFFSET]
  790 000002A0 E001            B                RxInterrupt ;goes to RxInterrupt since it has failed
  791 000002A2         
  792 000002A2         
  793 000002A2         Else_01                              ;else loop that branches
  794 000002A2 212C            MOVS             R1,#UART0_C2_T_RI
  795 000002A4 70D1            STRB             R1,[R2,#UART0_C2_OFFSET]
  796 000002A6         
  797 000002A6         RxInterrupt                          ;Rxinterupt, which is called if it is confimred to be a Rx c
                                                            ase
  798 000002A6         
  799 000002A6 7911            LDRB             R1,[R2,#UART0_S1_OFFSET]
  800 000002A8 2020            MOVS             R0,#UART0_S1_RDRF_MASK ;masking and so forth
  801 000002AA         
  802 000002AA 4208            TST              R0,R1
  803 000002AC         
  804 000002AC D003            BEQ              Over_ISR
  805 000002AE         
  806 000002AE 79D0            LDRB             R0,[R2,#UART0_D_OFFSET]
  807 000002B0 4919            LDR              R1,=RxQRecord ;loading RxQrecord and then enquing
  808 000002B2 F7FF FEED       BL               Enqueue
  809 000002B6         
  810 000002B6         Over_ISR
  811 000002B6         
  812 000002B6 B662            CPSIE            I           ;stop masking
  813 000002B8 BDE0            POP              {R5-R7,PC}



ARM Macro Assembler    Page 22 


  814 000002BA         
  815 000002BA         
  816 000002BA         ;--------------------------- PUTCHAR -----------------------
  817 000002BA         ;Recives R0
  818 000002BA         ;Places it onto termianl screen
  819 000002BA         ;does not modify registers
  820 000002BA         PutChar
  821 000002BA B50F            PUSH             { R0, R1, R2, R3, LR }
  822 000002BC 4918            LDR              R1,=TxQRecord ;loading TxQBuffer
  823 000002BE         PC_Loop
  824 000002BE B672            CPSID            I
  825 000002C0 F7FF FEE6       BL               Enqueue     ;enquing item in R0
  826 000002C4 B662            CPSIE            I
  827 000002C6 D2FA            BCS              PC_Loop
  828 000002C8         
  829 000002C8 4811            LDR              R0,=UART0_BASE
  830 000002CA 21AC            MOVS             R1,#UART0_C2_TI_RI
  831 000002CC 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  832 000002CE         
  833 000002CE BD0F            POP              { R0, R1, R2, R3, PC }
  834 000002D0         
  835 000002D0         
  836 000002D0         ;--------------------------- GETCHAR -----------------------
  837 000002D0         ;takes terminal off of screen that has been entered
  838 000002D0         ;places value into R0 register
  839 000002D0         GetChar                              ;copy and paste code of Getchar
  840 000002D0 B50E            PUSH             { R1, R2, R3, LR }
  841 000002D2 4911            LDR              R1,=RxQRecord ;loading RxQBuff
  842 000002D4         GC_Loop
  843 000002D4 B672            CPSID            I
  844 000002D6 F7FF FEB8       BL               DeQueue     ;dequeuing from the queue
  845 000002DA B662            CPSIE            I
  846 000002DC         
  847 000002DC D2FA            BCS              GC_Loop
  848 000002DE         
  849 000002DE BD0E            POP              { R1, R2, R3, PC }
  850 000002E0         
  851 000002E0         
  852 000002E0         ;>>>>>   end subroutine code <<<<<
  853 000002E0                 ALIGN
  854 000002E0         ;****************************************************************
  855 000002E0         ;Vector Table Mapped to Address 0 at Reset



ARM Macro Assembler    Page 23 


  856 000002E0         ;Linker requires __Vectors to be exported
  857 000002E0 40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              40048038 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100 
              00000000 
              00000000 
              00000000 
              00000000         AREA             RESET, DATA, READONLY
  858 00000000                 IMPORT           __initial_sp
  859 00000000                 IMPORT           Dummy_Handler
  860 00000000                 IMPORT           Reset_Handler
  861 00000000         
  862 00000000         
  863 00000000         __Vectors
  864 00000000         ;ARM core vectors
  865 00000000 00000000        DCD              __initial_sp ;00:end of stack
  866 00000004 00000000        DCD              Reset_Handler ;01:reset vector
  867 00000008 00000000        DCD              Dummy_Handler ;02:NMI
  868 0000000C 00000000        DCD              Dummy_Handler ;03:hard fault
  869 00000010 00000000        DCD              Dummy_Handler ;04:(reserved)
  870 00000014 00000000        DCD              Dummy_Handler ;05:(reserved)
  871 00000018 00000000        DCD              Dummy_Handler ;06:(reserved)
  872 0000001C 00000000        DCD              Dummy_Handler ;07:(reserved)



ARM Macro Assembler    Page 24 


  873 00000020 00000000        DCD              Dummy_Handler ;08:(reserved)
  874 00000024 00000000        DCD              Dummy_Handler ;09:(reserved)
  875 00000028 00000000        DCD              Dummy_Handler ;10:(reserved)
  876 0000002C 00000000        DCD              Dummy_Handler ;11:SVCall (supervisor call)
  877 00000030 00000000        DCD              Dummy_Handler ;12:(reserved)
  878 00000034 00000000        DCD              Dummy_Handler ;13:(reserved)
  879 00000038 00000000        DCD              Dummy_Handler ;14:PendableSrvReq (pendable request 
  880 0000003C         ;   for system service)
  881 0000003C 00000000        DCD              Dummy_Handler ;15:SysTick (system tick timer)
  882 00000040 00000000        DCD              Dummy_Handler ;16:DMA channel 0 xfer complete/error
  883 00000044 00000000        DCD              Dummy_Handler ;17:DMA channel 1 xfer complete/error
  884 00000048 00000000        DCD              Dummy_Handler ;18:DMA channel 2 xfer complete/error
  885 0000004C 00000000        DCD              Dummy_Handler ;19:DMA channel 3 xfer complete/error
  886 00000050 00000000        DCD              Dummy_Handler ;20:(reserved)
  887 00000054 00000000        DCD              Dummy_Handler ;21:command complete; read collision
  888 00000058 00000000        DCD              Dummy_Handler ;22:low-voltage detect;
  889 0000005C         ;   low-voltage warning
  890 0000005C 00000000        DCD              Dummy_Handler ;23:low leakage wakeup
  891 00000060 00000000        DCD              Dummy_Handler ;24:I2C0
  892 00000064 00000000        DCD              Dummy_Handler ;25:I2C1
  893 00000068 00000000        DCD              Dummy_Handler ;26:SPI0 (all IRQ sources)
  894 0000006C 00000000        DCD              Dummy_Handler ;27:SPI1 (all IRQ sources)
  895 00000070 00000000        DCD              UART0_ISR   ;28:UART0 (status; error)
  896 00000074 00000000        DCD              Dummy_Handler ;29:UART1 (status; error)
  897 00000078 00000000        DCD              Dummy_Handler ;30:UART2 (status; error)
  898 0000007C 00000000        DCD              Dummy_Handler ;31:ADC0
  899 00000080 00000000        DCD              Dummy_Handler ;32:CMP0
  900 00000084 00000000        DCD              Dummy_Handler ;33:TPM0
  901 00000088 00000000        DCD              Dummy_Handler ;34:TPM1
  902 0000008C 00000000        DCD              Dummy_Handler ;35:TPM2
  903 00000090 00000000        DCD              Dummy_Handler ;36:RTC (alarm)
  904 00000094 00000000        DCD              Dummy_Handler ;37:RTC (seconds)
  905 00000098 00000000        DCD              Dummy_Handler ;38:PIT (all IRQ sources)
  906 0000009C 00000000        DCD              Dummy_Handler ;39:I2S0
  907 000000A0 00000000        DCD              Dummy_Handler ;40:USB0
  908 000000A4 00000000        DCD              Dummy_Handler ;41:DAC0
  909 000000A8 00000000        DCD              Dummy_Handler ;42:TSI0
  910 000000AC 00000000        DCD              Dummy_Handler ;43:MCG
  911 000000B0 00000000        DCD              Dummy_Handler ;44:LPTMR0
  912 000000B4 00000000        DCD              Dummy_Handler ;45:Segment LCD
  913 000000B8 00000000        DCD              Dummy_Handler ;46:PORTA pin detect
  914 000000BC 00000000        DCD              Dummy_Handler ;47:PORTC and PORTD pin detect



ARM Macro Assembler    Page 25 


  915 000000C0         
  916 000000C0         
  917 000000C0         
  918 000000C0         __Vectors_End
  919 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  920 000000C0                 ALIGN
  921 000000C0         ;****************************************************************
  922 000000C0         ;Constants
  923 000000C0                 AREA             MyConst,DATA,READONLY
  924 00000000         ;>>>>> begin constants here <<<<<
  925 00000000 54 79 70 
              65 20 61 
              20 63 6F 
              6D 6D 61 
              6E 64 20 
              28 65 2C 
              64 2C 68 
              2C 70 2C 
              73 29 3A 
              20 00    InitString
                               DCB              "Type a command (e,d,h,p,s): ",0
  926 0000001D         
  927 0000001D 46 61 69 
              6C 75 72 
              65 3A 20 
              00       Failure DCB              "Failure: ",0
  928 00000027         
  929 00000027 53 75 63 
              63 65 73 
              73 3A 20 
              00       Success DCB              "Success: ",0
  930 00000031         
  931 00000031 49 6E 3D 
              30 78 00 Ln      DCB              "In=0x",0
  932 00000037         
  933 00000037 53 74 61 
              74 75 73 
              3A 00    Status  DCB              "Status:",0
  934 0000003F         
  935 0000003F 64 20 28 



ARM Macro Assembler    Page 26 


              64 65 71 
              75 65 75 
              65 29 2C 
              20 65 20 
              28 65 6E 
              71 75 65 
              75 65 29 
              2C 20 68 
              20 28 68 
              65 6C 70 
              29 2C 20 
              70 20 28 
              70 72 69 
              6E 74 29 
              2C 20 73 
              20 28 73 
              74 61 74 
              75 73 29 
              00       Help    DCB              "d (dequeue), e (enqueue), h (help), p (print), s (status)",0
  936 00000079         
  937 00000079 20 4F 75 
              74 3D 30 
              78 00    OUT     DCB              " Out=0x",0
  938 00000081         
  939 00000081 4C 65 6E 
              67 74 68 
              3A 00    Length  DCB              "Length:",0
  940 00000089         
  941 00000089 20 4E 75 
              6D 3D 00 Num     DCB              " Num=",0
  942 0000008F         
  943 0000008F 43 68 61 
              72 61 63 
              74 65 72 
              20 74 6F 
              20 65 6E 
              71 75 65 
              75 65 3A 
              00       CTE     DCB              "Character to enqueue:",0
  944 000000A5         
  945 000000A5 3A 20 20 
              20 20 20 



ARM Macro Assembler    Page 27 


              20 20 20 
              00       DQGDS   DCB              ":        ",0
  946 000000AF         ;>>>>>   end constants here <<<<<
  947 000000AF 00              ALIGN
  948 000000B0         ;****************************************************************
  949 000000B0         ;Variables
  950 000000B0                 AREA             MyData,DATA,READWRITE
  951 00000000         ;>>>>> begin variables here <<<<<
  952 00000000         
  953 00000000         
  954 00000000 00 00 00 
              00       QBuffer SPACE            Q_BUF_SZ
  955 00000004                 ALIGN
  956 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 QRecord SPACE            Q_REC_SZ
  957 00000016 00 00           ALIGN
  958 00000018         
  959 00000018         
  960 00000018 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 28 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQBuffer
                               SPACE            TRxQ_BUF_SZ
  961 00000068                 ALIGN
  962 00000068 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxQRecord
                               SPACE            Q_REC_SZ
  963 0000007A 00 00           ALIGN
  964 0000007C         
  965 0000007C         
  966 0000007C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 29 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQBuffer
                               SPACE            TRxQ_BUF_SZ
  967 000000CC                 ALIGN
  968 000000CC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxQRecord
                               SPACE            Q_REC_SZ
  969 000000DE 00 00           ALIGN
  970 000000E0         
  971 000000E0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       String  SPACE            79



ARM Macro Assembler    Page 30 


  972 0000012F         ;>>>>>   end variables here <<<<<
  973 0000012F 00              ALIGN
  974 00000130                 END
Command Line: --debug --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=".\objects
\exercise 11.d" -o".\objects\exercise 11.o" -I"E:\Assembly\Exercise 11\Code 11\RTE" -I"D:\Program Files\MDK\ARM\PACK\Kei
l\Kinetis_KLxx_DFP\1.10.0\Device\Include" -I"D:\Program Files\MDK\ARM\CMSIS\Include" --predefine="__EVAL SETA 1" --prede
fine="__UVISION_VERSION SETA 518" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exercise 11.lst "exercise 11.s"
