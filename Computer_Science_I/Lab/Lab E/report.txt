The Report
Joel Yuhas
jxy8307@g.rit.edu

Question 1
What is the purpose of pivot?
	Pivot allows the program to effectivly cut the given list in half. By doing this recursivly and determining if the values shoudl be above or below pivot, the list will exponentially get smaller.
	This ties into the next part of the question as if the pivot point was not the middle item. If the pivot was not the middle item, such as the first item or last item, then pivot would not be able to
	exclude as many variables as it could if it were to start in the middle. This means that if the desired value was at the end of the list, the pivot point would have to go through every single item in
	the list instead of being able to cut the list in half each time, making the program run much longer. This also means that the algorithm will behave differently becasue it would be acting more like
	insertion sort rather than a pivot point.

Question 2
Quickselect is versatile becasue it can find the kth smalles number, what test cases are need to fully exercise quickselect?
	First there should be the base test case, where there is no input, which would lead to an output that might say "No input detected"
	The next test case should a few numbers all diffrent. This should give an output of the value that is the kth smallest number
	Next test case should have dupicate values in it. The program should be able to sort through the duplicate values and pick which one, based on value
	and not position in the list, is the kth smallest number in said list.
	There should be a test case with a very large amount of numbers, with duplicates, to ensure the program can handle a large list, and should return the kth smallest 
	number
	and finally, there should be a test case with diffrent variable types, such as with strings instead of integers, which should return an error message

Question 3
what is the elapsed time performance of you quick select program? what is the elapsed time performance of your median program? Complete several runs.
Time(s)
<<<<Quick Select>>>> (at k of 5000)
0.02841
0.02768
0.02480
0.02797
0.02461
0.02786
0.02519
	

<<<Regular>>>	
12.04656
12.19702
12.10587
12.00226
12.01408
12.02673
12.07769

	
	